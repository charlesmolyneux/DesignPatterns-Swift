Name: Decorator
Pattern Type: Structural
Aliases: Wrapper
 
Summary
  Attach new behaviours to objects.
  This is achieved by placing objects inside a special 'wrapper' object that contains behaviours.

Example
  A Notification libary that can receive a message and send these on via email.
  However, may want to notify users via Slack, Facebook, Twitter, SMS and so forth.
  Instead than subclassing the various times (i.e. SMS Notifier, SMS + Facebook Notifier) we should look to use composition or aggreagation.
  One object has a reference to another and assigns the work. Rather than the subclasss doing the work.
  
 Pros:
 - Extend an object's behaviour without making a new subclass
 - Add & Remove responibilities from objects at runtime
 - Combine multiple behaviours by wrapping an object into multiple decorators
 - SRP: Divide up monolithic classes into smaller classes
 
 Cons:
 - Difficult to implement a decorators in a way that its behaviour doesn't depend on the decorators in the stack.

