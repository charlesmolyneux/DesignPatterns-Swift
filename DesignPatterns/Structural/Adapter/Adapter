Name: Adapter
Pattern Type: Structural
Aliases: Wrapper
  
Summary:
  Adapter is a structural design pattern that allows objects with incompatiable interfaces to collaborate.
 
Example:
 App Downloads data from multiple sources in XML. The App displays this data.
 However, eventually you introduce a library which only works with data in a JSON Format.
 
Solution:
 Create an 'adapter' that converts the interface of one object to another object can understand it.
 In this case, an XML to JSON adapter.
 
Pros:
- SRP: Can seprarate the interface/data conversion of code from the business logic.
- OCP: Can introduce new types of adapters easily without breaking existing code. As long as they use the clients interface.
 
 Cons:
 - Increase to overall complexity because introducing new interfaces and classes. Sometimes the simpler solution is to just change the service class to match existing code.
  
