 Abstract Factory
 Pattern Type: Creational
 Aliases: Virtual Constructor
 
 Summary:
  Produce families of related objects without specifying their concrete classes.
  
 Example:
  You have a furniture shop.
  You have classes that represent products (Chair, Sofa, Table, Stool)
  You also have classes for the various varients of styles (Modern, Victorian, 60s)
  You need to be able to create individual furniture objects so they match the same family.

Solution:
 1. Make interfaces for each unique product of the product family (i.e. Chair).
 2. All varients of the above can adopt the interface (i.e. ModernChair, 60sChair).
 3. Next, create the Abstract Factory. This interface has a number of methods to create the product families (i.e. createChair, createSofa).
 4. For each product varient, we need another factory based off the above Abstract Factory. i.e. 'ModernFurnitureFactory' which can only create its respective varients (i.e. ModernChair).

 Pros:
 - SRP: Extracts product initalisation code into one place
 - OCP: Can introduce new varients of products without breaking existing code
 - Ensures compatability between products returned from the Factory
 - Avoids tight coupling between concrete classes and client code

 Cons:
 - Can increase complexity by introducing additional interfaces/classes.
