Name: Singleton
Pattern Type: Creational
Aliases: N/A

Summary:
  Singletons let you ensure that a class has only one instance and provides a global access point to this instance.
 
Use Cases:
 1. Use when your program should have a single instance available to all clients.
 2. When you need stricter control over global variables.

Examples:
 let sharedURLSession = URLSession.shared  // Shared URL Session
 let defaultFileManager = FileManager.default  // Default File Manager
 let standardUserDefaults = UserDefaults.standard  // Standard User Defaults

Pros:
  - Ensures a class has only a single instance
  - Global access point to that instance.
  - Object only initialised when it's requested.
 
 Cons:
 - Violates the SRP.
 - Singletons can mask bad design. e.g. components can know too much about each other.
 - Beware multi-threading. Must make sure multiple threads do not create a singleton object 'x' times.
 - Can increase unit testing complexity. May need a creative solution for mocking the singleton.
