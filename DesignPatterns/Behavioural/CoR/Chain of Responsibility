Name: Chain of Responsibility
Pattern Type: Behavioural
Aliases: CoR, Chain of Command
  
Summary:
  CoR lets you pass a request along a chain of handlers.
  The handler will then decide whether to process the request or to pass it to the next handler.
 
Example:
 When making a Networking request you may want to perform a number of steps.
 This can be broken into a number of steps each of which determines whether to pass onto the next handler or process it.
 1. Make Networking Request.
 2. Check if EndPoint Reachable > Throw Error if Not
 3. Check for cached response > Resume if not Cached
 4. Seralize any Body in the Request > Throw Errror if Unable
 5. Make Network Call
 6. Try Parse Response to Expected Object > Return Result if Able
 7. If Unable, Try Parse to Expected Error Object > Return if Able
 8. If Unable to Parse Error Object Check HttpCode > Return
 
Solution:
 CoR relies on transforming behaviours into stand-alone objects (handlers). Ideally, each handler is a single class with a single method to perform the check.
 Handlers are linked as a chain, so each linked handler should store a reference to the next handler in the chain. Handlers can decide not to pass on down the chain and stop any further processing
 
Pros:
- Gives control over request handling.
- SRP: Decouples classes, seperates classes which invoke operations from those that perform operations.
- OCP: Introduce new handlers into the app without breaking existing code.
 
 Cons:
 - May have some requests which end up being unhandled.
  
